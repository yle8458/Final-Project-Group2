# -*- coding: utf-8 -*-
"""EDA and visualization of Baidu_Comp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MMGTpbFFGgGXs55voBoTAfrTKGjxuWK3
"""

import numpy as np
import pandas as pd
import cv2
import json
import os
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon
from matplotlib.collections import PatchCollection
from mpl_toolkits.mplot3d import Axes3D
from numpy import genfromtxt
import seaborn as sns

DATASET_DIR = '/content/drive/My Drive/Pku Kaggle/'
JSON_DIR = os.path.join(DATASET_DIR, 'car_models_json')
NUM_IMG_SAMPLES = 10 # The number of image samples used for visualization

train = pd.read_csv(os.path.join(DATASET_DIR, 'train.csv'))

train.head()

print('Example Prediction String....')
print(train['PredictionString'].values[0])

train_exp = pd.concat([train, train['PredictionString'].str.split(' ', expand=True)], axis=1)
train_exp = train_exp.rename(columns={0 : '1_model_type', 1 : '1_yaw', 2 : '1_pitch',
                                                3 : '1_roll', 4 : '1_x', 5 : '1_y', 6 : '1_z'})
train_exp.drop('PredictionString', axis=1).head()

train['prediction'] = train.PredictionString.str.split()

train_data = train.loc[:, ['ImageId', 'prediction']].values

train['prediction']

ImageID = train['ImageId'].values

labels = [[train_data[j][1][i:i+7] for i in range(0, len(train_data[j][1]), 7)] for j in range(len(train_data))]
labels[0:3]

ImageID

Label = np.asarray(labels)
Label.shape

Train_set = zip(ImageID,Label)
Train_set = list(Train_set)
#Train_set = np.asarray(Train_set) #
Train_set[0]   #保持全是list type

models = {
    #           name                id
         'baojun-310-2017':          0,
            'biaozhi-3008':          1,
      'biaozhi-liangxiang':          2,
       'bieke-yinglang-XT':          3,
            'biyadi-2x-F0':          4,
           'changanbenben':          5,
            'dongfeng-DS5':          6,
                 'feiyate':          7,
     'fengtian-liangxiang':          8,
            'fengtian-MPV':          9,
       'jilixiongmao-2015':         10,
       'lingmu-aotuo-2009':         11,
            'lingmu-swift':         12,
         'lingmu-SX4-2012':         13,
          'sikeda-jingrui':         14,
    'fengtian-weichi-2006':         15,
               '037-CAR02':         16,
                 'aodi-a6':         17,
               'baoma-330':         18,
               'baoma-530':         19,
        'baoshijie-paoche':         20,
         'bentian-fengfan':         21,
             'biaozhi-408':         22,
             'biaozhi-508':         23,
            'bieke-kaiyue':         24,
                    'fute':         25,
                 'haima-3':         26,
           'kaidilake-CTS':         27,
               'leikesasi':         28,
           'mazida-6-2015':         29,
              'MG-GT-2015':         30,
                   'oubao':         31,
                    'qiya':         32,
             'rongwei-750':         33,
              'supai-2016':         34,
         'xiandai-suonata':         35,
        'yiqi-benteng-b50':         36,
                   'bieke':         37,
               'biyadi-F3':         38,
              'biyadi-qin':         39,
                 'dazhong':         40,
          'dazhongmaiteng':         41,
                'dihao-EV':         42,
  'dongfeng-xuetielong-C6':         43,
 'dongnan-V3-lingyue-2011':         44,
'dongfeng-yulong-naruijie':         45,
                 '019-SUV':         46,
               '036-CAR01':         47,
             'aodi-Q7-SUV':         48,
              'baojun-510':         49,
                'baoma-X5':         50,
         'baoshijie-kayan':         51,
         'beiqi-huansu-H3':         52,
          'benchi-GLK-300':         53,
            'benchi-ML500':         54,
     'fengtian-puladuo-06':         55,
        'fengtian-SUV-gai':         56,
'guangqi-chuanqi-GS4-2015':         57,
    'jianghuai-ruifeng-S3':         58,
              'jili-boyue':         59,
                  'jipu-3':         60,
              'linken-SUV':         61,
               'lufeng-X8':         62,
             'qirui-ruihu':         63,
             'rongwei-RX5':         64,
         'sanling-oulande':         65,
              'sikeda-SUV':         66,
        'Skoda_Fabia-2011':         67,
        'xiandai-i25-2016':         68,
        'yingfeinidi-qx80':         69,
         'yingfeinidi-SUV':         70,
              'benchi-SUR':         71,
             'biyadi-tang':         72,
       'changan-CS35-2012':         73,
             'changan-cs5':         74,
      'changcheng-H6-2016':         75,
             'dazhong-SUV':         76,
 'dongfeng-fengguang-S560':         77,
   'dongfeng-fengxing-SX6':         78
}

models_map = dict((y, x) for x, y in models.items())
#models_map

cars = []
for string in labels:
    for car in string:
        cars.append(car)
cars = np.array(cars)
#cars

Car_appear , counts = np.unique(cars[..., 0].astype(np.uint8), return_counts=True)
all_model_types = zip(Car_appear, counts)
Car_Names = []
for i, model_type in enumerate(all_model_types):
    print('{}.\t Model type: {:<22} | {} cars'.format(i, models_map[model_type[0]], model_type[1]))

Car_appear , counts = np.unique(cars[..., 0].astype(np.uint8), return_counts=True)
all_model_types = zip(Car_appear, counts)
Car_Names = []
for i, model_type in enumerate(all_model_types):
   Car_Names.append(models_map[model_type[0]])
print(Car_Names)

Car_appear,counts

Car_Names = np.asarray(Car_Names)
Car_Names

import matplotlib.cm as cm
def tri_indices(simplices):
    return ([triplet[c] for triplet in simplices] for c in range(3))

def plotly_trisurf(x, y, z, simplices, colormap=cm.RdBu, plot_edges=None):

    points3D=np.vstack((x,y,z)).T
    tri_vertices=map(lambda index: points3D[index], simplices)
    zmean=[np.mean(tri[:,2]) for tri in tri_vertices ]
    min_zmean=np.min(zmean)
    max_zmean=np.max(zmean)
    facecolor=[map_z2color(zz,  colormap, min_zmean, max_zmean) for zz in zmean]
    I,J,K=tri_indices(simplices)

    triangles=go.Mesh3d(x=x, y=y, z=z,
                     facecolor=facecolor,
                     i=I, j=J, k=K,
                     name='')

    if plot_edges is None: return [triangles]
    else:
        lists_coord=[[[T[k%3][c] for k in range(4)]+[ None]   for T in tri_vertices]  for c in range(3)]
        Xe, Ye, Ze=[reduce(lambda x,y: x+y, lists_coord[k]) for k in range(3)]

        lines=go.Scatter3d(x=Xe, y=Ye, z=Ze,
                        mode='lines',
                        line=dict(color= 'rgb(50,50,50)', width=1.5))
        return [triangles, lines]
    
def map_z2color(zval, colormap, vmin, vmax):
    if vmin>vmax: raise ValueError('incorrect relation between vmin and vmax')
    t=(zval-vmin)/float((vmax-vmin))#normalize val
    R, G, B, alpha=colormap(t)
    return 'rgb('+'{:d}'.format(int(R*255+0.5))+','+'{:d}'.format(int(G*255+0.5))+\
           ','+'{:d}'.format(int(B*255+0.5))+')'

import json
import numpy as np
import matplotlib.pyplot as plt
import plotly.figure_factory as FF
import plotly.graph_objs as go

import numpy as np

with open(os.path.join(DATASET_DIR,'car_models_json/linken-SUV.json')) as json_file:
    data = json.load(json_file)
    vertices, triangles = np.array(data['vertices']), np.array(data['faces']) - 1
    
    x, y, z = vertices[:,0], vertices[:,2], -vertices[:,1]
    car_type = data['car_type']
    graph_data = plotly_trisurf(x,y,z, triangles, colormap=cm.RdBu, plot_edges=None)

    # with no axis
    noaxis=dict(showbackground=False,
            showline=False,
            zeroline=False,
            showgrid=False,
            showticklabels=False,
            title='')
    
    # with axis
    axis = dict(
        showbackground=True,
        backgroundcolor="rgb(230, 230,230)",
        gridcolor="rgb(255, 255, 255)",
        zerolinecolor="rgb(255, 255, 255)",
    )
    
    layout = go.Layout(
         title=car_type + ' with noaxis',
         width=800, height=600,
         scene=dict(
             xaxis=dict(noaxis), yaxis=dict(noaxis), zaxis=dict(noaxis),
#              aspectratio=dict( x=1, y=2, z=0.5)
         )
    )

    fig = go.Figure(data= graph_data, layout=layout)
    
    
    fig.show()
    
    layout = go.Layout(
         title=car_type + ' with axis', 
         width=800, height=600,
         scene=dict(
             xaxis=dict(axis), yaxis=dict(axis), zaxis=dict(axis),
#              aspectratio=dict( x=1, y=2, z=0.5)
         )
    )

    fig = go.Figure(data= graph_data, layout=layout)
    fig.update_layout(scene_aspectmode="data")
    
    fig.show()

import plotly.graph_objects as go
fig = go.Figure(data=[go.Pie(labels=Car_Names, values=counts, hole=.5)])
fig.show()

Car_Data = zip(Car_Names, counts)
Car_Data = list(Car_Data)
type(Car_Data)
len(Car_Data)

countss = list(counts)
type(countss)
res= {}
for key in Car_Names: 
    for value in countss: 
        res[key] = [value] 
        countss.remove(value) 
        break  
res
ddf = pd.DataFrame.from_dict(res)
ddf.transpose

from google.colab import drive
drive.mount('/content/drive')